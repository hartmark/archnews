#!/usr/bin/env bash

# Wrapper for pacman that invokes `archnews` command to check Arch news.
#
# In case one uses different package manager (that is "pacman compatible") environmental variable
# ARCHNEWS_PACKAGE_MANAGER_FULL_PATH can be set.


FEED_URL="https://www.archlinux.org/feeds/news/"
PACKAGE_MANAGER_FULL_PATH_DEFAULT="/usr/bin/pacman"
ARCHNEWS_WRAPPER_CONF="$HOME/.config/archnews_wrap_conf.sh"


# Load configuration if exists.
if [[ -f "$ARCHNEWS_WRAPPER_CONF" ]] ; then
    source "$ARCHNEWS_WRAPPER_CONF"
fi

# Check whether there is a user configuration for ARCHNEWS_PACKAGE_MANAGER_FULL_PATH.
if [[ -z "$ARCHNEWS_PACKAGE_MANAGER_FULL_PATH" ]] ; then
    PACKAGE_MANAGER_FULL_PATH="$PACKAGE_MANAGER_FULL_PATH_DEFAULT"
else
    PACKAGE_MANAGER_FULL_PATH="$ARCHNEWS_PACKAGE_MANAGER_FULL_PATH"
fi


# Universal prompt function.
prompt () {
    local default reply

    while true; do
        # Handle second parameter.
        if [[ "$2" = "Y" ]] ; then
            default=Y
        elif [[ "$2" = "N" ]] ; then
            default=N
        else
            default=
        fi

        # User prompt, handle default value if empty input.
        echo -e -n "$1"
        read -r reply
        if [[ -z "$reply" ]] ; then
            reply=$default
        fi

        # Check if the reply is valid.
        case "$reply" in
            Y|y|yes|Yes) return 0 ;;
            N|n|no|No) return 1 ;;
        esac
    done
}

# Check whether "-Syu" or some of its variants like "-Suuyy" were invoked.
if (echo "$1" | grep -E -- '-S(y[[:alnum:]]*u[[:alnum:]]*|u[[:alnum:]]*y[[:alnum:]]*)') > /dev/null 2>&1
then
    # Fetch the feed. Reasons:
    # 1) To make sure that feed will be downloaded only once.
    #    (Otherwise it might be downloaded twice.)
    # 2) It might happen that some news would appear between downloads.
    #    Such unread news would be then marked as read.
    FEED="$(curl -fLs $FEED_URL)"

    # Check whether fetching was OK.
    if [[ $? -ne 0 ]] ; then
        # Fetching failed.
        tmp_prompt="\e[1;34;48m:: \e[1;37;48mFetching of Arch News RSS Feed "
        tmp_prompt+="\e[1;31;48mfailed\e[1;37;48m! Continue? [Y/n] \e[0m"

        prompt "$tmp_prompt" Y

        [[ $? -eq 1 ]] && exit 1
    else
        # Fetching was OK, so show it.
        echo "$FEED" | archnews --stdin --unread --no

        # Check whether there are some unread messages.
        if [[ $? -eq 0 ]] ; then
            # Yes, unread messages.
            prompt "\e[1;34;48m:: \e[1;37;48mMark them as read and update? [Y/n] \e[0m" Y

            # Check user response.
            if [[ $? -eq 0 ]] ; then
                # Mark messages as read.
                echo "$FEED" | archnews --stdin --unread --yes > /dev/null
            else
                exit 1
            fi
        else
            # No unread messages, print one blank line to emphasize the message.
            echo
        fi
    fi
fi

# Run the original command.
exec "$PACKAGE_MANAGER_FULL_PATH" "$@"

